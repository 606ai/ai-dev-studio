generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  passwordHash String
  avatar       String?
  role         UserRole @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  models         Model[]             @relation("ModelOwner")
  collaborations ModelCollaborator[]
  changes        Change[]
  comments       Comment[]
}

enum UserRole {
  ADMIN
  USER
}

model Model {
  id          String      @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User        @relation("ModelOwner", fields: [ownerId], references: [id])
  status      ModelStatus @default(DRAFT)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  collaborators ModelCollaborator[]
  versions      ModelVersion[]
  changes       Change[]
  deployments   Deployment[]
}

enum ModelStatus {
  DRAFT
  TRAINING
  READY
  DEPLOYED
  ARCHIVED
}

model ModelCollaborator {
  id        String           @id @default(uuid())
  modelId   String
  userId    String
  role      CollaboratorRole
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  model Model @relation(fields: [modelId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([modelId, userId])
}

enum CollaboratorRole {
  OWNER
  EDITOR
  VIEWER
}

model ModelVersion {
  id        String        @id @default(uuid())
  modelId   String
  version   String
  metrics   Json?
  artifacts Json
  status    VersionStatus @default(CREATED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  model       Model        @relation(fields: [modelId], references: [id])
  deployments Deployment[]
}

enum VersionStatus {
  CREATED
  TRAINING
  READY
  FAILED
}

model Change {
  id          String       @id @default(uuid())
  modelId     String
  userId      String
  type        ChangeType
  content     String
  diff        String?
  description String
  status      ChangeStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  model     Model            @relation(fields: [modelId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
  comments  Comment[]
  reviewers ChangeReviewer[]
}

enum ChangeType {
  ADD
  MODIFY
  DELETE
}

enum ChangeStatus {
  PENDING
  APPROVED
  REJECTED
}

model ChangeReviewer {
  id        String       @id @default(uuid())
  changeId  String
  userId    String
  status    ReviewStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  change Change @relation(fields: [changeId], references: [id])

  @@unique([changeId, userId])
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Comment {
  id        String   @id @default(uuid())
  changeId  String
  userId    String
  content   String
  file      String?
  line      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  change    Change            @relation(fields: [changeId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
  reactions CommentReaction[]
  replies   Comment[]         @relation("CommentReplies")
  parent    Comment?          @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  String?
}

model CommentReaction {
  id        String   @id @default(uuid())
  commentId String
  userId    String
  type      String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([commentId, userId, type])
}

model Deployment {
  id          String           @id @default(uuid())
  modelId     String
  versionId   String
  environment String
  status      DeploymentStatus @default(PENDING)
  metrics     Json?
  config      Json
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  model   Model        @relation(fields: [modelId], references: [id])
  version ModelVersion @relation(fields: [versionId], references: [id])
}

enum DeploymentStatus {
  PENDING
  RUNNING
  FAILED
  STOPPED
}
